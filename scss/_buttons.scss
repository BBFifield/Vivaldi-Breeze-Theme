@mixin inner-close-button {
    border-radius: 10px;
    background-color: $colorCloseBtnBg;
    fill: var(--colorBg) !important;

    &:hover {
        background-color: $colorCloseBtnActiveBg;
        &:active {
            background-color: $colorCloseBtnActiveHvrBg;
        }
    }
    &:active {
        background-color: $colorCloseBtnActiveBg;
    }
}

@mixin button($colorChangeBg, $colorStagnantBg, $radius) {
    border-radius: $radius !important;
    background-color: $colorStagnantBg !important;
    background-image: none !important;
    transition: border 0.1s;
    &:hover {
        border: 1.0px solid $colorHighlightBdr !important;
        background-color: $colorChangeBg !important;
    }
    &:active {
        border: 1.0px solid $colorHighlightBdr !important;
        background-color: $colorChangeBg !important;
        transition: background-color 0.1s;
        &:hover {
            background-color: $colorBtnActiveHvrBg !important;
        }
    }
}

.danger {
    color: var(--colorFg) !important;
}

.button-toolbar:not(.BookmarkLocationSelector-AddFolderButton) {
    .ToolbarButton-Button {
        border: 1.0px solid rgba(0,0,0,0.0) !important;
        @include button(rgba(0,0,0,0.0), rgba(0,0,0,0.0), 3px);

        &.button-pressed, &.button-pressed:hover {
            border: 1.0px solid $colorHighlightBdr !important;
            background-color: $colorBtnActiveHvrBg !important;
        }
    }
}

.button-show-setting .ToolbarButton-Button, input[type=button]:not(.circular), input[type=submit], .privacy-btn-icon {
    border: 1.0px solid $colorInputBtnBdr !important;
    @include button(var(--colorTabBar), var(--colorTabBar), 3px);
}

.close {
    @include inner-close-button;
    svg {
        path {
            d: path($innerCloseIcon);
        }
    }
}

button[title="New Folder"] {
    svg path {
        d: path($newFolderIcon16);
    }
}

button[title="Edit gesture"], button span.column-icon {
    svg {
        path {
            all: unset;
            d: path($editIcon16);
        }
        rect {
            all: unset;
        }
    }
}

@each $iconTitle in $addIconPanelTitleList {
    .button-toolbar[title="#{$iconTitle}"], button[title="#{$iconTitle}"] {
        svg path {
            d: path($addIcon16);
        }
        + .button-toolbar, + button {
            svg rect {
                x: 3;
                y: 7;
                width: 10px;
                height: 2px;
            }
        }
    }
}

@each $iconTitle in $addIconSettingsTitleList {
    button[title="#{$iconTitle}"] {
        svg path {
            d: path($addIcon16);
        }
        + button {
            svg path {
                d: path($removeIcon16);
            }
        }
    }
}

@each $iconTitle in $checkmarkIconTitleList {
    .button-toolbar[title="#{$iconTitle}"], button[title="#{$iconTitle}"] {
        svg path {
            d: path($checkmarkIcon16);
        }
    }
}

@each $iconTitle in $seenIconTitleList {
    .button-toolbar[title="#{$iconTitle}"], button[title="#{$iconTitle}"] {
        svg path {

            d: path($seenIcon16);
        }
    }
}

.button-toolbar[title="Pause"], button[title="Pause"] {
    svg path {
        &:nth-child(1) {
            d: path(list.nth($pauseIcon16, 1));
        }
        &:nth-child(2) {
            d: path(list.nth($pauseIcon16, 2));
        }
    }
}
@each $iconTitle in $refreshIconTitleList {
    .button-toolbar[title="#{$iconTitle}"], button[title="#{$iconTitle}"] {
        svg path {
            &:nth-child(1) {
                d: path($refreshIcon16);
            }
            &:nth-child(2) {
                all: unset;
            }
        }
    }
}

.button-toolbar[title="Remove all finished"], button[title="Remove all finished"] {
    svg path {
        &:nth-child(1) {
            d: path($clearIcon16);
        }
        &:nth-child(2) {
            all: unset;
        }
    }
}

.button-toolbar[title="Resume Download"], button[title="Resume Download"] {
    svg {
        polygon {
            all: unset;
        }
        background-image: url($playIcon16);
    }
}

.TabbedView {
    .TabbedView-List {
        button {
            border: 1.0px solid $colorInputBtnBdr !important;
            @include button(var(--colorTabBar), var(--colorTabBar), 3px)
        }
    }
}


.toolbar-default {
    .toolbar-group:not(.toolbar) {
        .button-toolbar {
            .ToolbarButton-Button {
                border: 1.0px solid transparent !important;
                @include button(transparent, transparent, 3px);
            }
        }
    }
    &.toolbar {
        .toolbar-group.toolbar {
            gap: 2px;
            hr {
                all: unset;
            }
            .button-toolbar {
                .ToolbarButton-Button:not(.button-pressed):not(button[title="Check all feeds"]):not(button[title="Add a feed"]) {
                    border: 1.0px solid $colorInputBtnBdr !important;
                    @include button(var(--colorTabBar),var(--colorTabBar) , 3px);
                }
            }
        }
    }
    > .button-toolbar {
        .ToolbarButton-Button {
            border: 1.0px solid $colorInputBtnBdr !important;
            @include button(var(--colorTabBar), var(--colorTabBar), 3px);
        }
    }
}

/*input[type=button]:not(.circular), input[type=submit], input[type=color], .FormButton {
    height: 36px;
}*/

.drop-down-menu > button > svg path {
    fill-rule: evenodd;
    d: path($downArrowIcon16);
}

.VivaldiDropdown-SelectedValue-Arrow svg path {
    fill-rule: evenodd;
    d: path($downArrowIcon16);
}

button.home {
    border: 1px solid transparent;
    @include button(var(--colorBg), var(--colorBg), 3px);
    svg path {
        d: path($homeIcon16);
    }
    &:disabled {
        border: 0px;
    }
}

